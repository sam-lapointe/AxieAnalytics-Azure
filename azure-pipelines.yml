trigger:
  branches:
    include:
      - main
  paths:
    include:
      - IaC/*

pool:
  name: OnPrem

stages:
  - stage: Validate
    displayName: Terraform Validate
    variables:
    - group: Dev
    jobs:
      - job: TerraformPlan
        steps:
        - task: TerraformInstaller@1
          displayName: Terraform Install
          inputs:
           terraformVersion: 'latest'

        - task: AzureCLI@2
          displayName: Login with Azure OIDC
          inputs:
            azureSubscription: 'AxieMarket-Dev'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "Authenticated with Azure OIDC"

        - script: |
            terraform init -backend-config="storage_account_name=$(TFSTATE_STORAGE_ACCOUNT)" -backend-config="container_name=axiemarket-$(ENVIRONMENT)" -backend-config="key=$(ENVIRONMENT).tfstate"
          env:
            ARM_USE_OIDC: $(ARM_USE_OIDC)
            ARM_OIDC_AZURE_SERVICE_CONNECTION_ID: $(ARM_OIDC_AZURE_SERVICE_CONNECTION_ID)
            ARM_USE_AZUREAD: $(ARM_USE_AZUREAD)
            ARM_TENANT_ID: $(ARM_TENANT_ID)
            ARM_CLIENT_ID: $(ARM_CLIENT_ID)
            ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          displayName: Terraform Init
          workingDirectory: IaC

        - script: |
            terraform fmt --check
          displayName: Terraform Format
          workingDirectory: IaC
          continueOnError: true

        - script: |
            terraform validate
          displayName: Terraform Validate
          workingDirectory: IaC
          
  - stage: DeployDev
    displayName: Terraform deployment to Dev
    dependsOn: Validate
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
    - group: Dev
    jobs:
    - deployment: DeployDev
      environment: 'Dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'

            - script: |
                terraform init -backend-config="storage_account_name=$(TFSTATE_STORAGE_ACCOUNT)" -backend-config="container_name=axiemarket-$(ENVIRONMENT)" -backend-config="key=$(ENVIRONMENT).tfstate"
              displayName: Terraform Init
              workingDirectory: IaC
            
            - script: |
                terraform plan -var-file=$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT)-tfplan
              displayName: Terraform Plan
              workingDirectory: IaC

            - script: |
                terraform apply -var-file=$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT)-tfplan
              displayName: Terraform Apply
              workingDirectory: IaC

  - stage: DeployStaging
    displayName: Terraform deployment to Staging
    dependsOn: DeployDev
    condition: succeeded()
    variables:
    - group: Staging
    jobs:
    - deployment: DeployStaging
      environment: 'Staging'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'

            - script: |
                terraform init -backend-config="storage_account_name=$(TFSTATE_STORAGE_ACCOUNT)" -backend-config="container_name=axiemarket-$(ENVIRONMENT)" -backend-config="key=$(ENVIRONMENT).tfstate"
              displayName: Terraform Init
              workingDirectory: IaC
            
            - script: |
                terraform plan -var-file=$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT)-tfplan
              displayName: Terraform Plan
              workingDirectory: IaC

            - script: |
                terraform apply -var-file=$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT)-tfplan
              displayName: Terraform Apply
              workingDirectory: IaC
            
  - stage: DeployProd
    displayName: Terraform deployment to Prod
    dependsOn: DeployStaging
    condition: succeeded()
    variables:
    - group: Prod
    jobs:
    - deployment: DeployProd
      environment: 'Prod'
      strategy:
       runOnce:
         deploy:
           steps:
           - task: TerraformInstaller@1
             displayName: Install Terraform
             inputs:
              terraformVersion: 'latest'

           - script: |
               terraform init -backend-config="storage_account_name=$(TFSTATE_STORAGE_ACCOUNT)" -backend-config="container_name=axiemarket-$(ENVIRONMENT)" -backend-config="key=$(ENVIRONMENT).tfstate"
             displayName: Terraform Init
             workingDirectory: IaC
          
           - script: |
               terraform plan -var-file=$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT)-tfplan
             displayName: Terraform Plan
             workingDirectory: IaC

           - script: |
               terraform apply -var-file=$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT)-tfplan
             displayName: Terraform Apply
             workingDirectory: IaC