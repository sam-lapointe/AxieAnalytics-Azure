trigger:
  branches:
    include:
      - main
  paths:
    include:
      - IaC/*

pool:
  name: OnPrem

stages:
  - stage: TerraformValidation
    displayName: Terraform Validate
    variables:
    - group: Dev
    jobs:
      - job: ValidateTerraform
        steps:
        - task: TerraformInstaller@1
          displayName: Terraform Install
          inputs:
           terraformVersion: 'latest'

        - script: |
            terraform init -backend=false
          displayName: Terraform Init
          workingDirectory: $(System.DefaultWorkingDirectory)/IaC

        - script: |
            terraform fmt --check
          displayName: Terraform Format
          workingDirectory: $(System.DefaultWorkingDirectory)/IaC
          continueOnError: true

        - script: |
            terraform validate
          displayName: Terraform Validate
          workingDirectory: $(System.DefaultWorkingDirectory)/IaC
          
  - stage: DeployDev
    displayName: Terraform deployment to Dev
    dependsOn: TerraformValidation
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
    - group: Dev
    jobs:
    - deployment: DeployDev
      environment: 'Dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

  - stage: DeleteDev
    displayName: Delete Dev
    dependsOn: DeployDev
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
    - group: Dev
    jobs:
    - job: waitForApproval
      displayName: Wait approval for deletion of Dev environment
      pool: server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: ''
          instructions: 'Approve to delete the Dev environment.'
  
    - deployment: DeleteDev
      environment: 'Dev'
      dependsOn: waitForApproval
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)
            
            - task: TerraformTaskV4@4
              displayName: Terraform Destroy
              inputs:
                provider: 'azurerm'
                command: 'destroy'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

  - stage: DeployStaging
    displayName: Terraform deployment to Staging
    dependsOn: DeployDev
    condition: succeeded()
    variables:
    - group: Staging
    jobs:
    - deployment: DeployStaging
      environment: 'Staging'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Staging'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)
            
            - task: TerraformTaskV4@4
              displayName: Terraform Plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Staging'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Staging'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

  - stage: DeleteStaging
    displayName: Delete Staging
    dependsOn: DeployStaging
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
    - group: Staging
    jobs:
    - job: waitForApproval
      displayName: Wait approval for deletion of Staging environment
      pool: server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: ''
          instructions: 'Approve to delete the Staging environment.'
    
    - deployment: DeleteStaging
      environment: 'Staging'
      dependsOn: waitForApproval
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Staging'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)
            
            - task: TerraformTaskV4@4
              displayName: Terraform Destroy
              inputs:
                provider: 'azurerm'
                command: 'destroy'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Staging'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

  - stage: DeployProd
    displayName: Terraform deployment to Prod
    dependsOn: DeployStaging
    condition: succeeded()
    variables:
    - group: Prod
    jobs:
    - deployment: DeployProd
      environment: 'Prod'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Prod'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Prod'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Prod'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)