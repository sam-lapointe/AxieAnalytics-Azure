trigger:
  branches:
     include:
       - main
  paths:
    include:
      - IaC/**
      - webhook_listener/**
      - database_config/**
      - store_sales/**
      - store_axies/**
      - backend/**
    exclude:
      - '**/README.md'
      - '**/docs/**'
      - '**/tests/**'

pool:
  name: OnPrem

variables:
  - group: SonarQube
  - group: Python

stages:
  - stage: DetermineChangedDirs
    jobs:
    - job: DetermineChanges
      steps:
        - checkout: self
          persistCredentials: true
          fetchDepth: 0

        - script: |
            echo "##[group]Checking which folders changed..."
            git diff --name-only HEAD^ > changed.txt
            echo "Changes: $(cat changed.txt)"
            echo "##[endgroup]"

            echo "##[group]Set Variables..."
            if grep "IaC/" changed.txt; then runIACCI=true; else runIACCI=false;fi
            echo "##vso[task.setvariable variable=runIACCI;isOutput=true]$runIACCI"
            if grep "webhook_listener/" changed.txt; then runWebhookListenerCI=true; else runWebhookListenerCI=false;fi
            echo "##vso[task.setvariable variable=runWebhookListenerCI;isOutput=true]$runWebhookListenerCI"
            if grep "store_sales/" changed.txt; then runStoreSalesCI=true; else runStoreSalesCI=false;fi
            echo "##vso[task.setvariable variable=runStoreSalesCI;isOutput=true]$runStoreSalesCI"
            if grep "store_axies/" changed.txt; then runStoreAxiesCI=true; else runStoreAxiesCI=false;fi
            echo "##vso[task.setvariable variable=runStoreAxiesCI;isOutput=true]$runStoreAxiesCI"
            if grep "backend/" changed.txt; then runBackendCI=true; else runBackendCI=false;fi
            echo "##vso[task.setvariable variable=runBackendCI;isOutput=true]$runBackendCI"
            echo "##[endgroup]"
          displayName: Check Changes
          name: CheckChanges

  - stage: RunCIPipelines
    dependsOn: DetermineChangedDirs
    variables:
    - group: Orchestrator
    - group: Service-WebhookListener
    - group: Service-StoreSales
    - group: Service-StoreAxies
    - group: Service-Backend
    jobs:
    - job: IaCCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runIACCI'], 'true')
      steps:
        - template: ci-iac.yml

    - job: WebhookListenerCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runWebhookListenerCI'], 'true')
      steps:
        - template: ci-webhooklistener.yml
          parameters:
            artifactName: $(WEBHOOK_ARTIFACT_NAME)

    - job: StoreSalesCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runStoreSalesCI'], 'true')
      steps:
        - template: ci-storesales.yml
          parameters:
            artifactName: $(SALES_ARTIFACT_NAME)

    - job: StoreAxiesCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runStoreAxiesCI'], 'true')
      steps:
        - template: ci-storeaxies.yml
          parameters:
            artifactName: $(AXIES_ARTIFACT_NAME)

    - job: BackendCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runBackendCI'], 'true')
      steps:
        - template: ci-backend.yml
          parameters:
            artifactName: $(BACKEND_ARTIFACT_NAME)

  - stage: DeployDev
    displayName: Deployment to Dev
    dependsOn: RunCIPipelines
    condition: succeeded()
    variables:
    - group: Dev
    jobs:
    - deployment: DeployDevInfra
      environment: 'Dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                commandOptions: '-reconfigure'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_SALES_PASSWORD: $(TF_VAR_POSTGRESQL_SALES_PASSWORD)
                TF_VAR_POSTGRESQL_SALES_USERNAME: $(TF_VAR_POSTGRESQL_SALES_USERNAME)
                TF_VAR_POSTGRESQL_AXIES_USERNAME: $(TF_VAR_POSTGRESQL_AXIES_USERNAME)
                TF_VAR_POSTGRESQL_AXIES_PASSWORD: $(TF_VAR_POSTGRESQL_AXIES_PASSWORD)
                TF_VAR_POSTGRESQL_BACKEND_USERNAME: $(TF_VAR_POSTGRESQL_BACKEND_USERNAME)
                TF_VAR_POSTGRESQL_BACKEND_PASSWORD: $(TF_VAR_POSTGRESQL_BACKEND_PASSWORD)
                TF_VAR_POSTGRESQL_AUTHORIZED_IPS: $(TF_VAR_POSTGRESQL_AUTHORIZED_IPS)
                TF_VAR_ALCHEMY_NODE_PROVIDER: $(TF_VAR_ALCHEMY_NODE_PROVIDER)
                TF_VAR_AXIE_API_KEY: $(TF_VAR_AXIE_API_KEY)

            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_SALES_PASSWORD: $(TF_VAR_POSTGRESQL_SALES_PASSWORD)
                TF_VAR_POSTGRESQL_SALES_USERNAME: $(TF_VAR_POSTGRESQL_SALES_USERNAME)
                TF_VAR_POSTGRESQL_AXIES_USERNAME: $(TF_VAR_POSTGRESQL_AXIES_USERNAME)
                TF_VAR_POSTGRESQL_AXIES_PASSWORD: $(TF_VAR_POSTGRESQL_AXIES_PASSWORD)
                TF_VAR_POSTGRESQL_BACKEND_USERNAME: $(TF_VAR_POSTGRESQL_BACKEND_USERNAME)
                TF_VAR_POSTGRESQL_BACKEND_PASSWORD: $(TF_VAR_POSTGRESQL_BACKEND_PASSWORD)
                TF_VAR_POSTGRESQL_AUTHORIZED_IPS: $(TF_VAR_POSTGRESQL_AUTHORIZED_IPS)
                TF_VAR_ALCHEMY_NODE_PROVIDER: $(TF_VAR_ALCHEMY_NODE_PROVIDER)
                TF_VAR_AXIE_API_KEY: $(TF_VAR_AXIE_API_KEY)

            - script: |
                tfoutput=$(terraform output -json)

                for key in $(echo "$tfoutput" | jq -r "keys[]"); do
                  value=$(echo "$tfoutput" | jq -r ".$key.value")
                  echo "Setting pipeline variable for: $key:$value"
                  echo "##vso[task.setvariable variable=$key;isOutput=true]$value"
                done
              name: SetTerraformOutputsVariables
              displayName: Set Terraform Outputs as Variables"
              workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'

    - job: ConfigureDevDB
      dependsOn:
      - DeployDevInfra
      variables:
      - group: Dev
      - name: database_hostname
        value: $[dependencies.DeployDevInfra.outputs['DeployDevInfra.SetTerraformOutputsVariables.database_hostname']]
      steps:
      - script: |
          liquibase --url=jdbc:postgresql://$(database_hostname).postgres.database.azure.com:5432/axie_market \
            --username=$(TF_VAR_POSTGRESQL_ADMIN_USERNAME) \
            --password=$(TF_VAR_POSTGRESQL_ADMIN_PASSWORD) \
            update
        workingDirectory: '$(System.DefaultWorkingDirectory)/database_config'
        displayName: Configuration with Liquibase
        env:
          store_sales_username: $(TF_VAR_POSTGRESQL_SALES_USERNAME)
          store_sales_password: $(TF_VAR_POSTGRESQL_SALES_PASSWORD)
          store_axies_username: $(TF_VAR_POSTGRESQL_AXIES_USERNAME)
          store_axies_password: $(TF_VAR_POSTGRESQL_AXIES_PASSWORD)
          backend_username: $(TF_VAR_POSTGRESQL_BACKEND_USERNAME)
          backend_password: $(TF_VAR_POSTGRESQL_BACKEND_PASSWORD)

    - job: DeployDevCode
      dependsOn:
      - DeployDevInfra
      variables:
      - group: Dev
      - group: Service-WebhookListener
      - group: Service-StoreSales
      - group: Service-StoreAxies
      - group: Service-Backend
      - name: WEBHOOK_FUNCTION_APP_NAME
        value: $[dependencies.DeployDevInfra.outputs['DeployDevInfra.SetTerraformOutputsVariables.webhook_function_name']]
      - name: SALES_FUNCTION_APP_NAME
        value: $[dependencies.DeployDevInfra.outputs['DeployDevInfra.SetTerraformOutputsVariables.sales_function_name']]
      - name: AXIES_FUNCTION_APP_NAME
        value: $[dependencies.DeployDevInfra.outputs['DeployDevInfra.SetTerraformOutputsVariables.axies_function_name']]
      - name: BACKEND_WEB_APP_NAME
        value: $[dependencies.DeployDevInfra.outputs['DeployDevInfra.SetTerraformOutputsVariables.backend_web_app_name']]
      steps:
      - task: AzureCli@2
        displayName: Deploy store_axies to production slot
        inputs:
          azureSubscription: 'AxieMarket-Dev'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az functionapp deployment source config-zip \
              --resource-group $(RESOURCE_GROUP_NAME) \
              --name "$(AXIES_FUNCTION_APP_NAME)" \
              --src "$(Pipeline.Workspace)/$(AXIES_ARTIFACT_NAME)/$(AXIES_ARTIFACT_NAME).zip" \
              --build-remote true

            FUNCTION_KEY=$(az functionapp function keys list \
              --resource-group $(RESOURCE_GROUP_NAME) \
              --name "$(AXIES_FUNCTION_APP_NAME)" \
              --function-name "init_axie_parts" \
              --query "default" -o tsv)

            curl -X POST "https://$(AXIES_FUNCTION_APP_NAME).azurewebsites.net/api/init_axie_parts?code=$FUNCTION_KEY"

      - task: AzureCli@2
        displayName: Deploy webhook_listener to production slot
        inputs:
          azureSubscription: 'AxieMarket-Dev'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az functionapp deployment source config-zip \
              --resource-group $(RESOURCE_GROUP_NAME) \
              --name "$(WEBHOOK_FUNCTION_APP_NAME)" \
              --src "$(Pipeline.Workspace)/$(WEBHOOK_ARTIFACT_NAME)/$(WEBHOOK_ARTIFACT_NAME).zip" \
              --build-remote true

      - task: AzureCli@2
        displayName: Deploy store_sales to production slot
        inputs:
          azureSubscription: 'AxieMarket-Dev'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az functionapp deployment source config-zip \
              --resource-group $(RESOURCE_GROUP_NAME) \
              --name "$(SALES_FUNCTION_APP_NAME)" \
              --src "$(Pipeline.Workspace)/$(SALES_ARTIFACT_NAME)/$(SALES_ARTIFACT_NAME).zip" \
              --build-remote true

      - task: AzureCli@2
        displayName: Deploy backend to production slot
        inputs:
          azureSubscription: 'AxieMarket-Dev'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az webapp deploy \
              --resource-group $(RESOURCE_GROUP_NAME) \
              --name "$(BACKEND_WEB_APP_NAME)" \
              --src "$(Pipeline.Workspace)/$(BACKEND_ARTIFACT_NAME)/$(BACKEND_ARTIFACT_NAME).zip" \

    - job: TestDev
      dependsOn:
      - DeployDevInfra
      - DeployDevCode
      - ConfigureDevDB
      steps:
      - script: |
          echo "TO DO: End to end testing."

    - job: WaitForApprovalDeletion
      displayName: Wait approval for deletion of Dev environment
      dependsOn:
      - DeployDevInfra
      - DeployDevCode
      - TestDev
      - ConfigureDevDB
      condition: succeededOrFailed()
      continueOnError: true
      pool: server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: ''
          instructions: 'Approve to delete the Dev environment.'
          onTimeout: resume
        continueOnError: true

    - job: OutputValidationResult
      displayName: Output Validation Result
      dependsOn:
      - WaitForApprovalDeletion
      condition: succeededOrFailed()
      variables:
        VALIDATION_RESULT: $[dependencies.WaitForApprovalDeletion.result]
      steps:
      - script: |
          echo "Validation Result: $VALIDATION_RESULT"
        displayName: Output Validation Result

    - deployment: DeleteDev
      environment: 'Dev'
      dependsOn:
      - WaitForApprovalDeletion
      condition: eq(dependencies.WaitForApprovalDeletion.result, 'Succeeded')
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                commandOptions: '-reconfigure'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)
            
            - task: TerraformTaskV4@4
              displayName: Terraform Destroy
              inputs:
                provider: 'azurerm'
                command: 'destroy'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_SALES_PASSWORD: $(TF_VAR_POSTGRESQL_SALES_PASSWORD)
                TF_VAR_POSTGRESQL_SALES_USERNAME: $(TF_VAR_POSTGRESQL_SALES_USERNAME)
                TF_VAR_POSTGRESQL_AXIES_USERNAME: $(TF_VAR_POSTGRESQL_AXIES_USERNAME)
                TF_VAR_POSTGRESQL_AXIES_PASSWORD: $(TF_VAR_POSTGRESQL_AXIES_PASSWORD)
                TF_VAR_POSTGRESQL_BACKEND_USERNAME: $(TF_VAR_POSTGRESQL_BACKEND_USERNAME)
                TF_VAR_POSTGRESQL_BACKEND_PASSWORD: $(TF_VAR_POSTGRESQL_BACKEND_PASSWORD)
                TF_VAR_POSTGRESQL_AUTHORIZED_IPS: $(TF_VAR_POSTGRESQL_AUTHORIZED_IPS)
                TF_VAR_ALCHEMY_NODE_PROVIDER: $(TF_VAR_ALCHEMY_NODE_PROVIDER)
                TF_VAR_AXIE_API_KEY: $(TF_VAR_AXIE_API_KEY)