trigger:
  branches:
     include:
       - main
  paths:
    include:
      - IaC/**
      - webhook_listener/**

pool:
  name: OnPrem

variables:
  - group: SonarQube
  - group: Python

stages:
  - stage: DetermineChangedDirs
    jobs:
    - job: DetermineChanges
      steps:
        - checkout: self
          persistCredentials: true
          fetchDepth: 0

        - script: |
            echo "##[group]Checking which folders changed..."
            git diff --name-only HEAD^ > changed.txt
            echo "Changes: $(cat changed.txt)"
            echo "##[endgroup]"

            echo "##[group]Set Variables..."
            if grep "IaC/" changed.txt; then runIACCI=true; else runIACCI=false;fi
            echo "##vso[task.setvariable variable=runIACCI;isOutput=true]$runIACCI"
            if grep "webhook_listener/" changed.txt; then runWebhookListenerCI=true; else runWebhookListenerCI=false;fi
            echo "##vso[task.setvariable variable=runWebhookListenerCI;isOutput=true]$runWebhookListenerCI"
            echo "##[endgroup]"
          displayName: Check Changes
          name: CheckChanges

  - stage: RunCIPipelines
    dependsOn: DetermineChangedDirs
    variables:
    - group: Orchestrator
    jobs:
    - job: IaCCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runIACCI'], 'true')
      steps:
        - template: ci-iac.yml

    - job: WebhookListenerCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runWebhookListenerCI'], 'true')
      steps:
        - template: ci-webhooklistener.yml

  - stage: DeployDev
    displayName: Deployment to Dev
    dependsOn: RunCIPipelines
    condition: succeeded()
    variables:
    - group: Dev
    jobs:
    - deployment: DeployDevInfra
      environment: 'Dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                commandOptions: '-reconfigure'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

    - job: DeployDevCode
      dependsOn:
      - DeployDevInfra
      steps:
      - script: |
          echo "TO DO: Publish the services artifacts to the Azure Functions."

    - job: DevTesting
      dependsOn:
      - DeployDevInfra
      - DeployDevCode
      steps:
      - script: |
          echo "TO DO: End to end testing."

    - deployment: DeleteDev
      environment: 'Dev'
      dependsOn:
      - DeployDevInfra
      - DeployDevCode
      - DevTesting
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                commandOptions: '-reconfigure'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)
            
            - task: TerraformTaskV4@4
              displayName: Terraform Destroy
              inputs:
                provider: 'azurerm'
                command: 'destroy'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)