trigger:
  branches:
     include:
       - main
  paths:
    include:
      - IaC/**
      - webhook_listener/**

pool:
  name: OnPrem

variables:
  - group: SonarQube
  - group: Python

stages:
  - stage: DetermineChangedDirs
    jobs:
    - job: DetermineChanges
      steps:
        - checkout: self
          persistCredentials: true
          fetchDepth: 0

        - script: |
            echo "##[group]Checking which folders changed..."
            git diff --name-only HEAD^ > changed.txt
            echo "Changes: $(cat changed.txt)"
            echo "##[endgroup]"

            echo "##[group]Set Variables..."
            if grep "IaC/" changed.txt; then runIACCI=true; else runIACCI=false;fi
            echo "##vso[task.setvariable variable=runIACCI;isOutput=true]$runIACCI"
            if grep "webhook_listener/" changed.txt; then runWebhookListenerCI=true; else runWebhookListenerCI=false;fi
            echo "##vso[task.setvariable variable=runWebhookListenerCI;isOutput=true]$runWebhookListenerCI"
            echo "##[endgroup]"
          displayName: Check Changes
          name: CheckChanges

  - stage: RunCIPipelines
    dependsOn: DetermineChangedDirs
    variables:
    - group: Orchestrator
    - group: Service-WebhookListener
    jobs:
    - job: IaCCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runIACCI'], 'true')
      steps:
        - template: ci-iac.yml

    - job: WebhookListenerCI
      condition: eq(stageDependencies.DetermineChangedDirs.DetermineChanges.outputs['CheckChanges.runWebhookListenerCI'], 'true')
      steps:
        - template: ci-webhooklistener.yml
          parameters:
            artifactName: $(WEBHOOK_ARTIFACT_NAME)

  - stage: DeployDev
    displayName: Deployment to Dev
    dependsOn: RunCIPipelines
    condition: succeeded()
    variables:
    - group: Dev
    jobs:
    - deployment: DeployDevInfra
      environment: 'Dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                commandOptions: '-reconfigure'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -out=$(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve $(ENVIRONMENT).tfplan'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)

    - job: DeployDevCode
      dependsOn:
      - DeployDevInfra
      variables:
      - group: Dev
      - group: Service-WebhookListener
      steps:
      - task: AzureCli@2
        displayName: Deploy webhook_listener to staging slot
        inputs:
          azureSubscription: 'AxieMarket-Dev'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az functionapp deployment source config-zip \
              --resource-group $(RESOURCE_GROUP_NAME) \
              --name "$(ENVIRONMENT)-$(WEBHOOK_FUNCTION_APP_NAME)" \
              --slot staging \
              --src "$(Pipeline.Workspace)/$(WEBHOOK_ARTIFACT_NAME)/$(WEBHOOK_ARTIFACT_NAME).zip" \
              --build-remote true

      - script: |
          sleep 60
        displayName: Wait 5 minutes

      - task: AzureCLI@2
        displayName: Swap webhook_listener to production slot
        inputs:
         azureSubscription: 'AxieMarket-Dev'
         scriptType: bash
         scriptLocation: inlineScript
         inlineScript: |
           az functionapp deployment slot swap \
             --resource-group $(RESOURCE_GROUP_NAME) \
             --name "$(ENVIRONMENT)-$(WEBHOOK_FUNCTION_APP_NAME)" \
             --slot staging \
             --target-slot production

    - job: DevTesting
      dependsOn:
      - DeployDevInfra
      - DeployDevCode
      steps:
      - script: |
          echo "TO DO: End to end testing."

  - stage: DeleteDevInfra
    displayName: Delete Dev Infra
    dependsOn: DeployDev
    condition: succeededOrFailed()
    variables:
    - group: Dev
    jobs:
    - job: WaitForApprovalDeletion
      displayName: Wait approval for deletion of Dev environment
      pool: server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: ''
          instructions: 'Approve to delete the Dev environment.'
          onTimeout: resume

    - deployment: DeleteDev
      environment: 'Dev'
      dependsOn:
      - WaitForApprovalDeletion
      condition: succeeded()
      strategy:
        runOnce:
          deploy:
            steps:
            - task: TerraformInstaller@1
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'
            
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                commandOptions: '-reconfigure'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                backendServiceArm: 'AxieMarket-Dev'
                backendAzureRmResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                backendAzureRmStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                backendAzureRmContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                backendAzureRmKey: $(BACKEND_AZURE_KEY_NAME)
            
            - task: TerraformTaskV4@4
              displayName: Terraform Destroy
              inputs:
                provider: 'azurerm'
                command: 'destroy'
                workingDirectory: '$(System.DefaultWorkingDirectory)/IaC'
                environmentServiceNameAzureRM: 'AxieMarket-Dev'
                commandOptions: '-input=false -var-file=./env/$(ENVIRONMENT).tfvars -auto-approve'
              env:
                TF_VAR_ALCHEMY_SIGNING_KEY: $(TF_VAR_ALCHEMY_SIGNING_KEY)
                TF_VAR_POSTGRESQL_ADMIN_PASSWORD: $(TF_VAR_POSTGRESQL_ADMIN_PASSWORD)
                TF_VAR_POSTGRESQL_ADMIN_USERNAME: $(TF_VAR_POSTGRESQL_ADMIN_USERNAME)
                TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD: $(TF_VAR_POSTGRESQL_WEBHOOK_PASSWORD)
                TF_VAR_POSTGRESQL_WEBHOOK_USERNAME: $(TF_VAR_POSTGRESQL_WEBHOOK_USERNAME)