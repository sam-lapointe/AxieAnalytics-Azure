parameters:
- name: artifactName
  type: string
  default: 'webhook_listener'

steps:
- script: |
    echo "Python Version: $(PYTHON_VERSION)"
    if ! python$(PYTHON_VERSION) --version > /dev/null 2>&1; then
      echo "❌ python$(PYTHON_VERSION) must be installed on the Self-Hosted Agent."
      exit 1
    else
      python$(PYTHON_VERSION) --version
    fi
  displayName: Check Python Version

- script: |
    python$(PYTHON_VERSION) -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt
    pip install -r requirements-dev.txt
  displayName: Install Dependencies
  workingDirectory: $(System.DefaultWorkingDirectory)/webhook_listener

- script: |
    source venv/bin/activate
    python$(PYTHON_VERSION) -m pytest test_function_app.py
  displayName: Unit Tests
  workingDirectory: $(System.DefaultWorkingDirectory)/webhook_listener

- script: |
    source venv/bin/activate
    ruff format --check --diff *.py
  displayName: Check formatting
  workingDirectory: $(System.DefaultWorkingDirectory)/webhook_listener

- script: |
    source venv/bin/activate
    ruff check *.py
  displayName: Check lint
  workingDirectory: $(System.DefaultWorkingDirectory)/webhook_listener

- script: |
    if ! sonar-scanner -v > /dev/null 2>&1; then
      echo "❌ sonar-scanner CLI must be installed on the Self-Hosted Agent."
    else
      sonar-scanner -v
    fi
  displayName: Check sonar-scanner version

- script: |
    sonar-scanner \
      -D sonar.projectKey=$(SONARQUBE_PROJECT_KEY) \
      -D sonar.projectName=$(SONARQUBE_PROJECT_NAME) \
      -D sonar.sources=$(System.DefaultWorkingDirectory)/webhook_listener \
      -D sonar.host.url=$(SONARQUBE_HOST_URL) \
      -D sonar.token=$(SONARQUBE_TOKEN)
  displayName: SonarQube Scanner

- script: |
    mkdir -p oryx_output
    docker run --rm \
      --user $(id -u):$(id -g) \
      -v $(System.DefaultWorkingDirectory)/webhook_listener:/repo \
      -v $(System.DefaultWorkingDirectory)/oryx_output:/output \
      mcr.microsoft.com/oryx/build:latest \
      /bin/bash -c "oryx build /repo -o /output --platform-name python --platform-version $(PYTHON_VERSION)"
  displayName: Build with Oryx

- task: ArchiveFiles@2
  displayName: Build Zip Artifact
  inputs:
    rootFolderOrFile: $(System.DefaultWorkingDirectory)/oryx_output
    includeRootFolder: false
    archiveType: "zip"
    archiveFile: "$(Build.ArtifactStagingDirectory)/webhook_listener.zip"
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: "$(Build.ArtifactStagingDirectory)/webhook_listener.zip"
    ArtifactName: ${{ parameters.artifactName }}
    publishLocation: Container

- script: |
    echo "Listing Current Directory"
    ls -la
    echo "Listing Pipeline Workspace"
    ls -la $(Pipeline.Workspace)